// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketStats.proto

package marketStats

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRegionRequest struct {
	// Defines which region the data is fetched for
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRegionRequest) Reset()         { *m = GetRegionRequest{} }
func (m *GetRegionRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegionRequest) ProtoMessage()    {}
func (*GetRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketStats_c47d04945c3ec18e, []int{0}
}
func (m *GetRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRegionRequest.Unmarshal(m, b)
}
func (m *GetRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRegionRequest.Marshal(b, m, deterministic)
}
func (dst *GetRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegionRequest.Merge(dst, src)
}
func (m *GetRegionRequest) XXX_Size() int {
	return xxx_messageInfo_GetRegionRequest.Size(m)
}
func (m *GetRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegionRequest proto.InternalMessageInfo

func (m *GetRegionRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

type GetTypeRequest struct {
	// Defines which type the data is fetched for
	TypeId               uint64   `protobuf:"varint,1,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTypeRequest) Reset()         { *m = GetTypeRequest{} }
func (m *GetTypeRequest) String() string { return proto.CompactTextString(m) }
func (*GetTypeRequest) ProtoMessage()    {}
func (*GetTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketStats_c47d04945c3ec18e, []int{1}
}
func (m *GetTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTypeRequest.Unmarshal(m, b)
}
func (m *GetTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTypeRequest.Marshal(b, m, deterministic)
}
func (dst *GetTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTypeRequest.Merge(dst, src)
}
func (m *GetTypeRequest) XXX_Size() int {
	return xxx_messageInfo_GetTypeRequest.Size(m)
}
func (m *GetTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTypeRequest proto.InternalMessageInfo

func (m *GetTypeRequest) GetTypeId() uint64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

type GetRegionTypeRequest struct {
	// Defines which region the data is fetched for
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Defines which type the data is fetched for
	TypeId               uint64   `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRegionTypeRequest) Reset()         { *m = GetRegionTypeRequest{} }
func (m *GetRegionTypeRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegionTypeRequest) ProtoMessage()    {}
func (*GetRegionTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketStats_c47d04945c3ec18e, []int{2}
}
func (m *GetRegionTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRegionTypeRequest.Unmarshal(m, b)
}
func (m *GetRegionTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRegionTypeRequest.Marshal(b, m, deterministic)
}
func (dst *GetRegionTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegionTypeRequest.Merge(dst, src)
}
func (m *GetRegionTypeRequest) XXX_Size() int {
	return xxx_messageInfo_GetRegionTypeRequest.Size(m)
}
func (m *GetRegionTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegionTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegionTypeRequest proto.InternalMessageInfo

func (m *GetRegionTypeRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *GetRegionTypeRequest) GetTypeId() uint64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

type GetHistoryStatsResponse struct {
	// The matching history stats
	HistoryStats         []*HistoryStats `protobuf:"bytes,1,rep,name=history_stats,json=historyStats,proto3" json:"history_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetHistoryStatsResponse) Reset()         { *m = GetHistoryStatsResponse{} }
func (m *GetHistoryStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetHistoryStatsResponse) ProtoMessage()    {}
func (*GetHistoryStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketStats_c47d04945c3ec18e, []int{3}
}
func (m *GetHistoryStatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHistoryStatsResponse.Unmarshal(m, b)
}
func (m *GetHistoryStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHistoryStatsResponse.Marshal(b, m, deterministic)
}
func (dst *GetHistoryStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHistoryStatsResponse.Merge(dst, src)
}
func (m *GetHistoryStatsResponse) XXX_Size() int {
	return xxx_messageInfo_GetHistoryStatsResponse.Size(m)
}
func (m *GetHistoryStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHistoryStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHistoryStatsResponse proto.InternalMessageInfo

func (m *GetHistoryStatsResponse) GetHistoryStats() []*HistoryStats {
	if m != nil {
		return m.HistoryStats
	}
	return nil
}

type HistoryStats struct {
	// The result's region's ID
	RegionId int64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// The result's type's ID
	TypeId int64 `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// Date this dataset was fetched from the server (usually at midnight)
	GeneratedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	// Latest available datapoint (usually from yesterday)
	CurrentStats *HistoryDataPoint `protobuf:"bytes,4,opt,name=current_stats,json=currentStats,proto3" json:"current_stats,omitempty"`
	// Previous datapoint
	PreviousStats *HistoryDataPoint `protobuf:"bytes,5,opt,name=previous_stats,json=previousStats,proto3" json:"previous_stats,omitempty"`
	// Last week's *weighted* average of the average price - use this for calculations!
	WeekPriceWeightedAverage float64 `protobuf:"fixed64,6,opt,name=week_price_weighted_average,json=weekPriceWeightedAverage,proto3" json:"week_price_weighted_average,omitempty"`
	// Last week's average average price (ignores volume)
	WeekPriceAverage float64 `protobuf:"fixed64,7,opt,name=week_price_average,json=weekPriceAverage,proto3" json:"week_price_average,omitempty"`
	// Last week's absolute standard deviation of the average price
	WeekPriceAverageStandardDeviation float64 `protobuf:"fixed64,8,opt,name=week_price_average_standard_deviation,json=weekPriceAverageStandardDeviation,proto3" json:"week_price_average_standard_deviation,omitempty"`
	// Last week's absolute standard deviation of the average price, can be used for analyzing price's volatility
	WeekPriceAverageRelativeStandardDeviation float64 `protobuf:"fixed64,9,opt,name=week_price_average_relative_standard_deviation,json=weekPriceAverageRelativeStandardDeviation,proto3" json:"week_price_average_relative_standard_deviation,omitempty"`
	// Last week's average daily ISK volume
	WeekIskVolumeAverage float64 `protobuf:"fixed64,10,opt,name=week_isk_volume_average,json=weekIskVolumeAverage,proto3" json:"week_isk_volume_average,omitempty"`
	// Last week's average daily ISK volume's standard deviation
	WeekIskVolumeAverageStandardDeviation float64 `protobuf:"fixed64,11,opt,name=week_isk_volume_average_standard_deviation,json=weekIskVolumeAverageStandardDeviation,proto3" json:"week_isk_volume_average_standard_deviation,omitempty"`
	// Last week's relative daily ISK volume's standard deviation, can be used for analyzing general market's volatility
	WeekIskVolumeAverageRelativeStandardDeviation float64 `protobuf:"fixed64,12,opt,name=week_isk_volume_average_relative_standard_deviation,json=weekIskVolumeAverageRelativeStandardDeviation,proto3" json:"week_isk_volume_average_relative_standard_deviation,omitempty"`
	// Total number of orders for that type last week
	WeekOrderCountTotal int64 `protobuf:"varint,13,opt,name=week_order_count_total,json=weekOrderCountTotal,proto3" json:"week_order_count_total,omitempty"`
	// Average daily order count last week
	WeekOrderCountAverage float64 `protobuf:"fixed64,14,opt,name=week_order_count_average,json=weekOrderCountAverage,proto3" json:"week_order_count_average,omitempty"`
	// Average daily order count's standard deviation last week
	WeekOrderCountStandardDeviation float64 `protobuf:"fixed64,15,opt,name=week_order_count_standard_deviation,json=weekOrderCountStandardDeviation,proto3" json:"week_order_count_standard_deviation,omitempty"`
	// Average daily order count's relative standard deviation last week, again can be used for volatility
	WeekOrderCountRelativeStandardDeviation float64 `protobuf:"fixed64,16,opt,name=week_order_count_relative_standard_deviation,json=weekOrderCountRelativeStandardDeviation,proto3" json:"week_order_count_relative_standard_deviation,omitempty"`
	// Total number of items of that type traded last week
	WeekVolumeTotal int64 `protobuf:"varint,17,opt,name=week_volume_total,json=weekVolumeTotal,proto3" json:"week_volume_total,omitempty"`
	// Average daily items traded of that type last week
	WeekVolumeAverage float64 `protobuf:"fixed64,18,opt,name=week_volume_average,json=weekVolumeAverage,proto3" json:"week_volume_average,omitempty"`
	// Standard deviation of that value
	WeekVolumeStandardDeviation float64 `protobuf:"fixed64,19,opt,name=week_volume_standard_deviation,json=weekVolumeStandardDeviation,proto3" json:"week_volume_standard_deviation,omitempty"`
	// Relative standard deviation, interesting for checking if there are non-continuous patterns (volatility)
	WeekVolumeRelativeStandardDeviation float64  `protobuf:"fixed64,20,opt,name=week_volume_relative_standard_deviation,json=weekVolumeRelativeStandardDeviation,proto3" json:"week_volume_relative_standard_deviation,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *HistoryStats) Reset()         { *m = HistoryStats{} }
func (m *HistoryStats) String() string { return proto.CompactTextString(m) }
func (*HistoryStats) ProtoMessage()    {}
func (*HistoryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketStats_c47d04945c3ec18e, []int{4}
}
func (m *HistoryStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoryStats.Unmarshal(m, b)
}
func (m *HistoryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoryStats.Marshal(b, m, deterministic)
}
func (dst *HistoryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryStats.Merge(dst, src)
}
func (m *HistoryStats) XXX_Size() int {
	return xxx_messageInfo_HistoryStats.Size(m)
}
func (m *HistoryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryStats.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryStats proto.InternalMessageInfo

func (m *HistoryStats) GetRegionId() int64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *HistoryStats) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *HistoryStats) GetGeneratedAt() *timestamp.Timestamp {
	if m != nil {
		return m.GeneratedAt
	}
	return nil
}

func (m *HistoryStats) GetCurrentStats() *HistoryDataPoint {
	if m != nil {
		return m.CurrentStats
	}
	return nil
}

func (m *HistoryStats) GetPreviousStats() *HistoryDataPoint {
	if m != nil {
		return m.PreviousStats
	}
	return nil
}

func (m *HistoryStats) GetWeekPriceWeightedAverage() float64 {
	if m != nil {
		return m.WeekPriceWeightedAverage
	}
	return 0
}

func (m *HistoryStats) GetWeekPriceAverage() float64 {
	if m != nil {
		return m.WeekPriceAverage
	}
	return 0
}

func (m *HistoryStats) GetWeekPriceAverageStandardDeviation() float64 {
	if m != nil {
		return m.WeekPriceAverageStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekPriceAverageRelativeStandardDeviation() float64 {
	if m != nil {
		return m.WeekPriceAverageRelativeStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekIskVolumeAverage() float64 {
	if m != nil {
		return m.WeekIskVolumeAverage
	}
	return 0
}

func (m *HistoryStats) GetWeekIskVolumeAverageStandardDeviation() float64 {
	if m != nil {
		return m.WeekIskVolumeAverageStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekIskVolumeAverageRelativeStandardDeviation() float64 {
	if m != nil {
		return m.WeekIskVolumeAverageRelativeStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekOrderCountTotal() int64 {
	if m != nil {
		return m.WeekOrderCountTotal
	}
	return 0
}

func (m *HistoryStats) GetWeekOrderCountAverage() float64 {
	if m != nil {
		return m.WeekOrderCountAverage
	}
	return 0
}

func (m *HistoryStats) GetWeekOrderCountStandardDeviation() float64 {
	if m != nil {
		return m.WeekOrderCountStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekOrderCountRelativeStandardDeviation() float64 {
	if m != nil {
		return m.WeekOrderCountRelativeStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekVolumeTotal() int64 {
	if m != nil {
		return m.WeekVolumeTotal
	}
	return 0
}

func (m *HistoryStats) GetWeekVolumeAverage() float64 {
	if m != nil {
		return m.WeekVolumeAverage
	}
	return 0
}

func (m *HistoryStats) GetWeekVolumeStandardDeviation() float64 {
	if m != nil {
		return m.WeekVolumeStandardDeviation
	}
	return 0
}

func (m *HistoryStats) GetWeekVolumeRelativeStandardDeviation() float64 {
	if m != nil {
		return m.WeekVolumeRelativeStandardDeviation
	}
	return 0
}

type HistoryDataPoint struct {
	// Date of the datapoint
	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Highest price the type was traded for that day
	Highest float64 `protobuf:"fixed64,2,opt,name=highest,proto3" json:"highest,omitempty"`
	// Lowest price the type was traded for that day
	Lowest float64 `protobuf:"fixed64,3,opt,name=lowest,proto3" json:"lowest,omitempty"`
	// Average price the type was traded for that day
	Average float64 `protobuf:"fixed64,4,opt,name=average,proto3" json:"average,omitempty"`
	// Total number of items of the type traded that day
	Volume int64 `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`
	// Total number orders for the type that day
	OrderCount           int64    `protobuf:"varint,6,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoryDataPoint) Reset()         { *m = HistoryDataPoint{} }
func (m *HistoryDataPoint) String() string { return proto.CompactTextString(m) }
func (*HistoryDataPoint) ProtoMessage()    {}
func (*HistoryDataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_marketStats_c47d04945c3ec18e, []int{5}
}
func (m *HistoryDataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoryDataPoint.Unmarshal(m, b)
}
func (m *HistoryDataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoryDataPoint.Marshal(b, m, deterministic)
}
func (dst *HistoryDataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryDataPoint.Merge(dst, src)
}
func (m *HistoryDataPoint) XXX_Size() int {
	return xxx_messageInfo_HistoryDataPoint.Size(m)
}
func (m *HistoryDataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryDataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryDataPoint proto.InternalMessageInfo

func (m *HistoryDataPoint) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *HistoryDataPoint) GetHighest() float64 {
	if m != nil {
		return m.Highest
	}
	return 0
}

func (m *HistoryDataPoint) GetLowest() float64 {
	if m != nil {
		return m.Lowest
	}
	return 0
}

func (m *HistoryDataPoint) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

func (m *HistoryDataPoint) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *HistoryDataPoint) GetOrderCount() int64 {
	if m != nil {
		return m.OrderCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRegionRequest)(nil), "marketStats.GetRegionRequest")
	proto.RegisterType((*GetTypeRequest)(nil), "marketStats.GetTypeRequest")
	proto.RegisterType((*GetRegionTypeRequest)(nil), "marketStats.GetRegionTypeRequest")
	proto.RegisterType((*GetHistoryStatsResponse)(nil), "marketStats.GetHistoryStatsResponse")
	proto.RegisterType((*HistoryStats)(nil), "marketStats.HistoryStats")
	proto.RegisterType((*HistoryDataPoint)(nil), "marketStats.HistoryDataPoint")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarketStatsClient is the client API for MarketStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketStatsClient interface {
	GetRegionHistory(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetHistoryStatsResponse, error)
	GetTypeHistory(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetHistoryStatsResponse, error)
	GetRegionTypeHistory(ctx context.Context, in *GetRegionTypeRequest, opts ...grpc.CallOption) (*HistoryStats, error)
}

type marketStatsClient struct {
	cc *grpc.ClientConn
}

func NewMarketStatsClient(cc *grpc.ClientConn) MarketStatsClient {
	return &marketStatsClient{cc}
}

func (c *marketStatsClient) GetRegionHistory(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetHistoryStatsResponse, error) {
	out := new(GetHistoryStatsResponse)
	err := c.cc.Invoke(ctx, "/marketStats.MarketStats/GetRegionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketStatsClient) GetTypeHistory(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetHistoryStatsResponse, error) {
	out := new(GetHistoryStatsResponse)
	err := c.cc.Invoke(ctx, "/marketStats.MarketStats/GetTypeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketStatsClient) GetRegionTypeHistory(ctx context.Context, in *GetRegionTypeRequest, opts ...grpc.CallOption) (*HistoryStats, error) {
	out := new(HistoryStats)
	err := c.cc.Invoke(ctx, "/marketStats.MarketStats/GetRegionTypeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketStatsServer is the server API for MarketStats service.
type MarketStatsServer interface {
	GetRegionHistory(context.Context, *GetRegionRequest) (*GetHistoryStatsResponse, error)
	GetTypeHistory(context.Context, *GetTypeRequest) (*GetHistoryStatsResponse, error)
	GetRegionTypeHistory(context.Context, *GetRegionTypeRequest) (*HistoryStats, error)
}

func RegisterMarketStatsServer(s *grpc.Server, srv MarketStatsServer) {
	s.RegisterService(&_MarketStats_serviceDesc, srv)
}

func _MarketStats_GetRegionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketStatsServer).GetRegionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketStats.MarketStats/GetRegionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketStatsServer).GetRegionHistory(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketStats_GetTypeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketStatsServer).GetTypeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketStats.MarketStats/GetTypeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketStatsServer).GetTypeHistory(ctx, req.(*GetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketStats_GetRegionTypeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketStatsServer).GetRegionTypeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketStats.MarketStats/GetRegionTypeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketStatsServer).GetRegionTypeHistory(ctx, req.(*GetRegionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketStats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketStats.MarketStats",
	HandlerType: (*MarketStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegionHistory",
			Handler:    _MarketStats_GetRegionHistory_Handler,
		},
		{
			MethodName: "GetTypeHistory",
			Handler:    _MarketStats_GetTypeHistory_Handler,
		},
		{
			MethodName: "GetRegionTypeHistory",
			Handler:    _MarketStats_GetRegionTypeHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketStats.proto",
}

func init() { proto.RegisterFile("marketStats.proto", fileDescriptor_marketStats_c47d04945c3ec18e) }

var fileDescriptor_marketStats_c47d04945c3ec18e = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x6f, 0xe3, 0x44,
	0x14, 0x95, 0xd7, 0x21, 0xdd, 0xbd, 0x49, 0xba, 0xc9, 0xb4, 0x6c, 0x4d, 0x02, 0x34, 0x9b, 0x65,
	0xd5, 0x74, 0xd9, 0xda, 0xa2, 0x11, 0x42, 0x42, 0x14, 0xa9, 0x1f, 0x52, 0xa9, 0x54, 0x44, 0xe5,
	0x46, 0xa0, 0x3e, 0x20, 0x6b, 0x5a, 0x0f, 0x89, 0x49, 0xe2, 0x31, 0xf6, 0x24, 0x55, 0x55, 0xf5,
	0x05, 0xf1, 0xc8, 0x1b, 0x2f, 0xfc, 0x1a, 0x78, 0xe4, 0x07, 0xf0, 0x17, 0xf8, 0x21, 0xc8, 0xd7,
	0x9e, 0xc4, 0xf1, 0x47, 0xd4, 0x7d, 0x1c, 0xdf, 0x73, 0xce, 0x9c, 0x7b, 0x26, 0xb9, 0x17, 0x1a,
	0x13, 0xea, 0x8f, 0x98, 0xb8, 0x14, 0x54, 0x04, 0xba, 0xe7, 0x73, 0xc1, 0x49, 0x25, 0xf1, 0xa9,
	0xf9, 0xe1, 0x80, 0xf3, 0xc1, 0x98, 0x19, 0xd4, 0x73, 0x0c, 0xea, 0xba, 0x5c, 0x50, 0xe1, 0x70,
	0x37, 0x86, 0x36, 0xb7, 0xe3, 0x2a, 0x9e, 0xae, 0xa7, 0x3f, 0x19, 0xc2, 0x99, 0xb0, 0x40, 0xd0,
	0x89, 0x17, 0x01, 0x3a, 0x06, 0xd4, 0x4f, 0x99, 0x30, 0xd9, 0xc0, 0xe1, 0xae, 0xc9, 0x7e, 0x99,
	0xb2, 0x40, 0x90, 0x16, 0x3c, 0xf3, 0xf1, 0x83, 0xe5, 0xd8, 0x9a, 0xd2, 0x56, 0xba, 0x25, 0xf3,
	0x69, 0xf4, 0xe1, 0xcc, 0xee, 0xec, 0xc2, 0xfa, 0x29, 0x13, 0xfd, 0x3b, 0x8f, 0x49, 0xf8, 0x16,
	0xac, 0x89, 0x3b, 0x8f, 0x2d, 0xc0, 0xe5, 0xf0, 0x78, 0x66, 0x77, 0xce, 0x61, 0x73, 0xae, 0x9d,
	0x24, 0xac, 0xd2, 0x4f, 0xaa, 0x3d, 0x59, 0x52, 0xbb, 0x82, 0xad, 0x53, 0x26, 0xbe, 0x71, 0x02,
	0xc1, 0xfd, 0x3b, 0xec, 0xdd, 0x64, 0x81, 0xc7, 0xdd, 0x80, 0x91, 0xaf, 0xa1, 0x36, 0x8c, 0xbe,
	0x5b, 0x41, 0x58, 0xd0, 0x94, 0xb6, 0xda, 0xad, 0xec, 0x7f, 0xa0, 0x27, 0xb3, 0x5b, 0x62, 0x56,
	0x87, 0x89, 0x53, 0xe7, 0x6f, 0x80, 0x6a, 0xb2, 0x9c, 0x75, 0xa8, 0x16, 0x3b, 0x54, 0xa5, 0x43,
	0x72, 0x00, 0xd5, 0x01, 0x73, 0x99, 0x4f, 0x05, 0xb3, 0x2d, 0x2a, 0x34, 0xb5, 0xad, 0x74, 0x2b,
	0xfb, 0x4d, 0x3d, 0x7a, 0x03, 0x5d, 0xbe, 0x81, 0xde, 0x97, 0x6f, 0x60, 0x56, 0xe6, 0xf8, 0x43,
	0x41, 0x8e, 0xa0, 0x76, 0x33, 0xf5, 0x7d, 0xe6, 0x8a, 0xb8, 0x8b, 0x12, 0xf2, 0x3f, 0xca, 0xeb,
	0xe2, 0x84, 0x0a, 0x7a, 0xc1, 0x1d, 0x57, 0x98, 0xd5, 0x98, 0x13, 0x19, 0x3f, 0x81, 0x75, 0xcf,
	0x67, 0x33, 0x87, 0x4f, 0x83, 0x58, 0xe4, 0xbd, 0xc7, 0x88, 0xd4, 0x24, 0x29, 0x52, 0x39, 0x80,
	0xd6, 0x2d, 0x63, 0x23, 0xcb, 0xf3, 0x9d, 0x1b, 0x66, 0xdd, 0x32, 0x67, 0x30, 0xc4, 0x96, 0x66,
	0xcc, 0xa7, 0x03, 0xa6, 0x95, 0xdb, 0x4a, 0x57, 0x31, 0xb5, 0x10, 0x72, 0x11, 0x22, 0x7e, 0x88,
	0x01, 0x87, 0x51, 0x9d, 0xbc, 0x05, 0x92, 0xa0, 0x4b, 0xd6, 0x1a, 0xb2, 0xea, 0x73, 0x96, 0x44,
	0x5f, 0xc0, 0xeb, 0x2c, 0x3a, 0x34, 0xef, 0xda, 0xd4, 0xb7, 0x2d, 0x9b, 0xcd, 0x1c, 0xfc, 0x49,
	0x6b, 0x4f, 0x51, 0xe0, 0x65, 0x5a, 0xe0, 0x32, 0x46, 0x9e, 0x48, 0x20, 0xa1, 0xa0, 0xe7, 0x28,
	0xfa, 0x6c, 0x4c, 0x85, 0x33, 0xcb, 0x95, 0x7e, 0x86, 0xd2, 0xbb, 0x69, 0x69, 0x33, 0xa6, 0x64,
	0xaf, 0xf8, 0x1c, 0xb6, 0xf0, 0x0a, 0x27, 0x18, 0x59, 0x33, 0x3e, 0x9e, 0x4e, 0x16, 0x7d, 0x02,
	0x6a, 0x6d, 0x86, 0xe5, 0xb3, 0x60, 0xf4, 0x3d, 0x16, 0x65, 0xaf, 0x57, 0xf0, 0xa6, 0x80, 0x96,
	0xe7, 0xaa, 0x82, 0x4a, 0xaf, 0xf3, 0x94, 0xb2, 0x8e, 0x7e, 0x86, 0x5e, 0x91, 0xf4, 0xaa, 0xce,
	0xab, 0x78, 0xc7, 0x5e, 0xde, 0x1d, 0xc5, 0xdd, 0xf7, 0xe0, 0x05, 0xde, 0xc5, 0x7d, 0x9b, 0xf9,
	0xd6, 0x0d, 0x9f, 0xba, 0xc2, 0x12, 0x5c, 0xd0, 0xb1, 0x56, 0xc3, 0x3f, 0xc4, 0x46, 0x58, 0xfd,
	0x2e, 0x2c, 0x1e, 0x87, 0xb5, 0x7e, 0x58, 0x22, 0x5f, 0x80, 0x96, 0x21, 0xc9, 0xcc, 0xd6, 0xd1,
	0xc5, 0xfb, 0xcb, 0x34, 0x19, 0xda, 0x39, 0xbc, 0xca, 0x10, 0x73, 0x3a, 0x79, 0x8e, 0x1a, 0xdb,
	0xcb, 0x1a, 0x59, 0xef, 0x3f, 0xc2, 0xdb, 0x8c, 0xda, 0xaa, 0x80, 0xea, 0x28, 0xbb, 0xb3, 0x2c,
	0x5b, 0x1c, 0xcd, 0x1b, 0x68, 0xa0, 0x7c, 0xfc, 0x04, 0x51, 0x2a, 0x0d, 0x4c, 0xe5, 0x79, 0x58,
	0x88, 0x12, 0x8e, 0x12, 0xd1, 0x61, 0x23, 0x89, 0x95, 0x61, 0x10, 0xbc, 0xb1, 0xb1, 0x40, 0xcb,
	0x20, 0x8e, 0xe1, 0xe3, 0x24, 0x3e, 0xc7, 0xec, 0x06, 0x52, 0x5b, 0x0b, 0x6a, 0xd6, 0x60, 0x1f,
	0x76, 0x92, 0x22, 0xab, 0x5a, 0xdf, 0x44, 0xb5, 0x57, 0x0b, 0xb5, 0xc2, 0xb6, 0x3b, 0xff, 0x28,
	0x50, 0x4f, 0x4f, 0x15, 0xa2, 0x43, 0xc9, 0xa6, 0x82, 0xe1, 0x00, 0x5d, 0x3d, 0x07, 0x11, 0x47,
	0x34, 0x58, 0x1b, 0x3a, 0x83, 0x21, 0x0b, 0x04, 0x0e, 0x56, 0xc5, 0x94, 0x47, 0xf2, 0x02, 0xca,
	0x63, 0x7e, 0x1b, 0x16, 0x54, 0x2c, 0xc4, 0xa7, 0x90, 0x21, 0x53, 0x2b, 0x45, 0x8c, 0xf8, 0x18,
	0x32, 0xa2, 0x0e, 0x71, 0x00, 0xaa, 0x66, 0x7c, 0x22, 0xdb, 0x50, 0x49, 0xbc, 0x3c, 0x8e, 0x32,
	0xd5, 0x04, 0x3e, 0x7f, 0xd9, 0xfd, 0xbf, 0x54, 0xa8, 0x7c, 0xbb, 0x98, 0x95, 0xe4, 0x77, 0x25,
	0xb1, 0x21, 0xe3, 0x16, 0xc9, 0xf2, 0x38, 0x4d, 0x2f, 0xd0, 0xe6, 0x27, 0xe9, 0x72, 0xde, 0xd6,
	0xea, 0xf4, 0x7e, 0xfd, 0xf7, 0xbf, 0x3f, 0x9e, 0xec, 0x91, 0x4f, 0x8d, 0xd9, 0x67, 0x46, 0x44,
	0x30, 0x70, 0x66, 0x1b, 0xf1, 0x72, 0x32, 0xa2, 0x95, 0x63, 0xdc, 0xcf, 0x77, 0xd1, 0x03, 0xf9,
	0x4d, 0x99, 0xef, 0x5f, 0x69, 0xa6, 0x95, 0xbe, 0x2d, 0xb1, 0x6b, 0x1f, 0x69, 0xc5, 0x40, 0x2b,
	0xbb, 0x64, 0xa7, 0xd0, 0x4a, 0xb8, 0xe2, 0x8c, 0xfb, 0x78, 0xef, 0x3d, 0x90, 0x3f, 0x95, 0xd4,
	0x6e, 0x97, 0x66, 0x5e, 0xe6, 0x27, 0x93, 0xb4, 0x54, 0xbc, 0x96, 0x3b, 0x47, 0xe8, 0xe3, 0x2b,
	0xf2, 0xe5, 0x3b, 0x44, 0x92, 0xb2, 0x76, 0x5d, 0xc6, 0xdf, 0x57, 0xef, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0xb5, 0x3b, 0x91, 0x39, 0x09, 0x00, 0x00,
}
