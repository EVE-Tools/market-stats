package sovereignty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetSovereigntyStructuresReader is a Reader for the GetSovereigntyStructures structure.
type GetSovereigntyStructuresReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSovereigntyStructuresReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSovereigntyStructuresOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewGetSovereigntyStructuresInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSovereigntyStructuresOK creates a GetSovereigntyStructuresOK with default headers values
func NewGetSovereigntyStructuresOK() *GetSovereigntyStructuresOK {
	return &GetSovereigntyStructuresOK{}
}

/*GetSovereigntyStructuresOK handles this case with default header values.

A list of sovereignty structures
*/
type GetSovereigntyStructuresOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload []*GetSovereigntyStructuresOKBodyItems0
}

func (o *GetSovereigntyStructuresOK) Error() string {
	return fmt.Sprintf("[GET /sovereignty/structures/][%d] getSovereigntyStructuresOK  %+v", 200, o.Payload)
}

func (o *GetSovereigntyStructuresOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSovereigntyStructuresInternalServerError creates a GetSovereigntyStructuresInternalServerError with default headers values
func NewGetSovereigntyStructuresInternalServerError() *GetSovereigntyStructuresInternalServerError {
	return &GetSovereigntyStructuresInternalServerError{}
}

/*GetSovereigntyStructuresInternalServerError handles this case with default header values.

Internal server error
*/
type GetSovereigntyStructuresInternalServerError struct {
	Payload GetSovereigntyStructuresInternalServerErrorBody
}

func (o *GetSovereigntyStructuresInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sovereignty/structures/][%d] getSovereigntyStructuresInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSovereigntyStructuresInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSovereigntyStructuresInternalServerErrorBody get_sovereignty_structures_internal_server_error
//
// Internal server error
swagger:model GetSovereigntyStructuresInternalServerErrorBody
*/
type GetSovereigntyStructuresInternalServerErrorBody struct {

	// get_sovereignty_structures_500_internal_server_error
	//
	// Internal server error message
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get sovereignty structures internal server error body
func (o *GetSovereigntyStructuresInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSovereigntyStructuresInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getSovereigntyStructuresInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

/*GetSovereigntyStructuresOKBodyItems0 get_sovereignty_structures_200_ok
//
// 200 ok object
swagger:model GetSovereigntyStructuresOKBodyItems0
*/
type GetSovereigntyStructuresOKBodyItems0 struct {

	// get_sovereignty_structures_alliance_id
	//
	// The alliance that owns the structure.
	//
	// Required: true
	AllianceID *int32 `json:"alliance_id"`

	// get_sovereignty_structures_solar_system_id
	//
	// Solar system in which the structure is located.
	//
	// Required: true
	SolarSystemID *int32 `json:"solar_system_id"`

	// get_sovereignty_structures_structure_id
	//
	// Unique item ID for this structure.
	// Required: true
	StructureID *int64 `json:"structure_id"`

	// get_sovereignty_structures_structure_type_id
	//
	// A reference to the type of structure this is.
	//
	// Required: true
	StructureTypeID *int32 `json:"structure_type_id"`

	// get_sovereignty_structures_vulnerability_occupancy_level
	//
	// The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
	//
	VulnerabilityOccupancyLevel float32 `json:"vulnerability_occupancy_level,omitempty"`

	// get_sovereignty_structures_vulnerable_end_time
	//
	// The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
	//
	VulnerableEndTime strfmt.DateTime `json:"vulnerable_end_time,omitempty"`

	// get_sovereignty_structures_vulnerable_start_time
	//
	// The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
	//
	VulnerableStartTime strfmt.DateTime `json:"vulnerable_start_time,omitempty"`
}

// Validate validates this get sovereignty structures o k body items0
func (o *GetSovereigntyStructuresOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllianceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateSolarSystemID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStructureID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStructureTypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSovereigntyStructuresOKBodyItems0) validateAllianceID(formats strfmt.Registry) error {

	if err := validate.Required("alliance_id", "body", o.AllianceID); err != nil {
		return err
	}

	return nil
}

func (o *GetSovereigntyStructuresOKBodyItems0) validateSolarSystemID(formats strfmt.Registry) error {

	if err := validate.Required("solar_system_id", "body", o.SolarSystemID); err != nil {
		return err
	}

	return nil
}

func (o *GetSovereigntyStructuresOKBodyItems0) validateStructureID(formats strfmt.Registry) error {

	if err := validate.Required("structure_id", "body", o.StructureID); err != nil {
		return err
	}

	return nil
}

func (o *GetSovereigntyStructuresOKBodyItems0) validateStructureTypeID(formats strfmt.Registry) error {

	if err := validate.Required("structure_type_id", "body", o.StructureTypeID); err != nil {
		return err
	}

	return nil
}
